name: build

on:
  push:
    paths-ignore:
      - 'README.md'
      - 'docs/**'

  pull_request:
    paths-ignore:
      - 'README.md'
      - 'docs/**'

jobs:
  build_cpu:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        python-version: [3.7]
        torch: [1.6.0, 1.7.0, 1.8.0, 1.9.0]
        include:
          - torch: 1.6.0
            torchvision: 0.7.0
          - torch: 1.7.0
            torchvision: 0.8.1
          - torch: 1.8.0
            torchvision: 0.9.0
          - torch: 1.9.0
            torchvision: 0.10.0
          - torch: 1.8.0
            torchvision: 0.9.0
            python-version: 3.9
          - torch: 1.9.0
            torchvision: 0.10.0
            python-version: 3.8
          - torch: 1.9.0
            torchvision: 0.10.0
            python-version: 3.9
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install PyTorch
        run: pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html
      - name: Install MMCV
        run: |
          pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch${{matrix.torch}}/index.html
          python -c 'import mmcv; print(mmcv.__version__)'
      - name: Install unittest dependencies
        run: pip install -r requirements/tests.txt -r requirements/optional.txt
      - name: Build and install
        run: rm -rf .eggs && pip install -e .
      - name: Run unittests and generate coverage report
        run: |
          coverage run --branch --source mmrotate -m pytest tests/
          coverage xml
          coverage report -m
  build_cu101:
    runs-on: ubuntu-18.04
    container:
      image: pytorch/pytorch:1.6.0-cuda10.1-cudnn7-devel
      env:
        LANG: C.UTF-8
    strategy:
      matrix:
        python-version: [3.7]
        torch: [1.6.0+cu101, 1.7.0+cu101, 1.8.0+cu101]
        include:
          - torch: 1.6.0+cu101
            torch_version: 1.6.0
            torchvision: 0.7.0+cu101
          - torch: 1.7.0+cu101
            torch_version: 1.7.0
            torchvision: 0.8.1+cu101
          - torch: 1.8.0+cu101
            torch_version: 1.8.0
            torchvision: 0.9.0+cu101
          - torch: 1.8.0+cu101
            torch_version: 1.8.0
            torchvision: 0.9.0+cu101
            python-version: 3.8
          - torch: 1.8.0+cu101
            torch_version: 1.8.0
            torchvision: 0.9.0+cu101
            python-version: 3.9
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Fetch GPG keys
        run: |
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub
      - name: Install system dependencies
        run: apt-get update && apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxrender-dev libxext6
      - name: Install python-dev
        run: apt-get update && apt-get install -y python${{matrix.python-version}}-dev
        if: ${{matrix.python-version != '3.9'}}
      - name: Install PyTorch
        run: python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html
      - name: Install MMCV
        run: |
          python -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cu101/torch${{matrix.torch_version}}/index.html
          python -c 'import mmcv; print(mmcv.__version__)'
      - name: Install unittest dependencies
        run: python -m pip install -r requirements/tests.txt -r requirements/optional.txt
      - name: Build and install
        run: |
          rm -rf .eggs
          python setup.py check -m -s
          TORCH_CUDA_ARCH_LIST=7.0 python -m pip install -e .
      - name: Run unittests and generate coverage report
        run: |
          coverage run --branch --source mmrotate -m pytest tests/
          coverage xml
          coverage report -m
  build_cu102:
    runs-on: ubuntu-18.04
    container:
      image: pytorch/pytorch:1.6.0-cuda10.1-cudnn7-devel
    strategy:
      matrix:
        python-version: [3.7]
        torch: [1.9.0+cu102]
        include:
          - torch: 1.9.0+cu102
            torch_version: 1.9.0
            torchvision: 0.10.0+cu102
          - torch: 1.9.0+cu102
            torch_version: 1.9.0
            torchvision: 0.10.0+cu102
            python-version: 3.8
          - torch: 1.9.0+cu102
            torch_version: 1.9.0
            torchvision: 0.10.0+cu102
            python-version: 3.9
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Fetch GPG keys
        run: |
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub
      - name: Install system dependencies
        run: apt-get update && apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxrender-dev libxext6 git
      - name: Install python-dev
        run: apt-get update && apt-get install -y python${{matrix.python-version}}-dev
        if: ${{matrix.python-version != '3.9'}}
      - name: Install PyTorch
        run: python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html
      - name: Install MMCV
        run: |
          python -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cu102/torch${{matrix.torch_version}}/index.html
          python -c 'import mmcv; print(mmcv.__version__)'
      - name: Install unittest dependencies
        run: python -m pip install -r requirements/tests.txt -r requirements/optional.txt
      - name: Build and install
        run: |
          rm -rf .eggs
          python setup.py check -m -s
          TORCH_CUDA_ARCH_LIST=7.0 python -m pip install -e .
      - name: Run unittests and generate coverage report
        run: |
          coverage run --branch --source mmrotate -m pytest tests/
          coverage xml
          coverage report -m
      - name: Upload coverage to Codecov
        if: ${{matrix.torch == '1.9.0+cu102' && matrix.python-version == '3.8'}}
        uses: codecov/codecov-action@v2
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
  build_windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022]
        # Currently, mmdet has some bugs in win-py3.8-cu111
        python: [3.7]
        platform: [cpu, cu102]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Upgrade pip
        run: pip install pip --upgrade --user
      - name: Install PyTorch
        # As a complement to Linux CI, we test on PyTorch LTS version
        run: pip install torch==1.8.2+${{ matrix.platform }} torchvision==0.9.2+${{ matrix.platform }} -f https://download.pytorch.org/whl/lts/1.8/torch_lts.html
      - name: Install MMCV
        run: pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch1.8/index.html --only-binary mmcv-full
      - name: Install unittest dependencies
        run: python -m pip install -r requirements/tests.txt -r requirements/optional.txt
      - name: Build and install
        run: pip install -e .
      - name: Run unittests
        run: coverage run --branch --source mmrotate -m pytest tests
      - name: Generate coverage report
        run: |
          coverage xml
          coverage report -m
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: false
